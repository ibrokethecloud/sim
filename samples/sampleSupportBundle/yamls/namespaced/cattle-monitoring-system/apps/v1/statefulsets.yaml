apiVersion: v1
items:
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      meta.helm.sh/release-name: rancher-monitoring
      meta.helm.sh/release-namespace: cattle-monitoring-system
      objectset.rio.cattle.io/id: default-mcc-rancher-monitoring-cattle-fleet-local-system
      prometheus-operator-input-hash: "364885480862668414"
    creationTimestamp: "2022-03-06T22:52:38Z"
    generation: 1
    labels:
      app: rancher-monitoring-prometheus
      app.kubernetes.io/instance: rancher-monitoring
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: rancher-monitoring
      app.kubernetes.io/version: 100.1.0_up19.0.3
      chart: rancher-monitoring-100.1.0_up19.0.3
      heritage: Helm
      objectset.rio.cattle.io/hash: a8c87f2d01731fdad3b988f675a7c8a7da10d382
      operator.prometheus.io/name: rancher-monitoring-prometheus
      operator.prometheus.io/shard: "0"
      release: rancher-monitoring
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
            f:objectset.rio.cattle.io/id: {}
            f:prometheus-operator-input-hash: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/part-of: {}
            f:app.kubernetes.io/version: {}
            f:chart: {}
            f:heritage: {}
            f:objectset.rio.cattle.io/hash: {}
            f:operator.prometheus.io/name: {}
            f:operator.prometheus.io/shard: {}
            f:release: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"0ff17fe9-72e5-4c92-86b2-41e83b206f99"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:podManagementPolicy: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:serviceName: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:kubectl.kubernetes.io/default-container: {}
              f:labels:
                .: {}
                f:app: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/managed-by: {}
                f:app.kubernetes.io/name: {}
                f:app.kubernetes.io/version: {}
                f:operator.prometheus.io/name: {}
                f:operator.prometheus.io/shard: {}
                f:prometheus: {}
            f:spec:
              f:containers:
                k:{"name":"config-reloader"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"SHARD"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/prometheus/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/prometheus/config_out"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/prometheus/rules/prometheus-rancher-monitoring-prometheus-rulefiles-0"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                k:{"name":"prometheus"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9090,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/prometheus/certs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/etc/prometheus/config_out"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/etc/prometheus/rules/prometheus-rancher-monitoring-prometheus-rulefiles-0"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/prometheus/web_config/web-config.yaml"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                      f:subPath: {}
                    k:{"mountPath":"/prometheus"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:subPath: {}
                k:{"name":"prometheus-proxy"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8081,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:runAsGroup: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/nginx"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/cache/nginx"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"init-config-reloader"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"SHARD"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/prometheus/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/prometheus/config_out"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/prometheus/rules/prometheus-rancher-monitoring-prometheus-rulefiles-0"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
                f:runAsGroup: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"config"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"config-out"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"nginx-home"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"prometheus-nginx"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"prometheus-rancher-monitoring-prometheus-rulefiles-0"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"tls-assets"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"web-config"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
          f:updateStrategy:
            f:type: {}
          f:volumeClaimTemplates: {}
      manager: operator
      operation: Update
      time: "2022-03-06T22:52:38Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:collisionCount: {}
          f:currentReplicas: {}
          f:currentRevision: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updateRevision: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2022-03-06T22:53:35Z"
    name: prometheus-rancher-monitoring-prometheus
    namespace: cattle-monitoring-system
    ownerReferences:
    - apiVersion: monitoring.coreos.com/v1
      blockOwnerDeletion: true
      controller: true
      kind: Prometheus
      name: rancher-monitoring-prometheus
      uid: 0ff17fe9-72e5-4c92-86b2-41e83b206f99
    resourceVersion: "6527"
    uid: 9bdef9f5-25d3-41ca-8898-1f662228d5d7
  spec:
    podManagementPolicy: Parallel
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: prometheus
        app.kubernetes.io/instance: rancher-monitoring-prometheus
        app.kubernetes.io/managed-by: prometheus-operator
        app.kubernetes.io/name: prometheus
        operator.prometheus.io/name: rancher-monitoring-prometheus
        operator.prometheus.io/shard: "0"
        prometheus: rancher-monitoring-prometheus
    serviceName: prometheus-operated
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: prometheus
        creationTimestamp: "null"
        labels:
          app: prometheus
          app.kubernetes.io/instance: rancher-monitoring-prometheus
          app.kubernetes.io/managed-by: prometheus-operator
          app.kubernetes.io/name: prometheus
          app.kubernetes.io/version: 2.28.1
          operator.prometheus.io/name: rancher-monitoring-prometheus
          operator.prometheus.io/shard: "0"
          prometheus: rancher-monitoring-prometheus
      spec:
        containers:
        - args:
          - --web.console.templates=/etc/prometheus/consoles
          - --web.console.libraries=/etc/prometheus/console_libraries
          - --storage.tsdb.retention.size=50GiB
          - --config.file=/etc/prometheus/config_out/prometheus.env.yaml
          - --storage.tsdb.path=/prometheus
          - --storage.tsdb.retention.time=5d
          - --web.enable-lifecycle
          - --web.external-url=http://rancher-monitoring-prometheus.cattle-monitoring-system:9090
          - --web.route-prefix=/
          - --web.config.file=/etc/prometheus/web_config/web-config.yaml
          image: rancher/mirrored-prometheus-prometheus:v2.28.1
          imagePullPolicy: IfNotPresent
          name: prometheus
          ports:
          - containerPort: 9090
            name: nginx-http
            protocol: TCP
          readinessProbe:
            failureThreshold: 120
            httpGet:
              path: /-/ready
              port: nginx-http
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            limits:
              cpu: "1"
              memory: 3000Mi
            requests:
              cpu: 500m
              memory: 750Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/prometheus/config_out
            name: config-out
            readOnly: true
          - mountPath: /etc/prometheus/certs
            name: tls-assets
            readOnly: true
          - mountPath: /prometheus
            name: prometheus-rancher-monitoring-prometheus-db
            subPath: prometheus-db
          - mountPath: /etc/prometheus/rules/prometheus-rancher-monitoring-prometheus-rulefiles-0
            name: prometheus-rancher-monitoring-prometheus-rulefiles-0
          - mountPath: /etc/prometheus/web_config/web-config.yaml
            name: web-config
            readOnly: true
            subPath: web-config.yaml
        - args:
          - --listen-address=:8080
          - --reload-url=http://127.0.0.1:9090/-/reload
          - --config-file=/etc/prometheus/config/prometheus.yaml.gz
          - --config-envsubst-file=/etc/prometheus/config_out/prometheus.env.yaml
          - --watched-dir=/etc/prometheus/rules/prometheus-rancher-monitoring-prometheus-rulefiles-0
          command:
          - /bin/prometheus-config-reloader
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: SHARD
            value: "0"
          image: rancher/mirrored-prometheus-operator-prometheus-config-reloader:v0.50.0
          imagePullPolicy: IfNotPresent
          name: config-reloader
          ports:
          - containerPort: 8080
            name: reloader-web
            protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 100m
              memory: 50Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/prometheus/config
            name: config
          - mountPath: /etc/prometheus/config_out
            name: config-out
          - mountPath: /etc/prometheus/rules/prometheus-rancher-monitoring-prometheus-rulefiles-0
            name: prometheus-rancher-monitoring-prometheus-rulefiles-0
        - args:
          - nginx
          - -g
          - daemon off;
          - -c
          - /nginx/nginx.conf
          image: rancher/mirrored-library-nginx:1.21.1-alpine
          imagePullPolicy: IfNotPresent
          name: prometheus-proxy
          ports:
          - containerPort: 8081
            name: nginx-http
            protocol: TCP
          resources: {}
          securityContext:
            runAsGroup: 101
            runAsUser: 101
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /nginx
            name: prometheus-nginx
          - mountPath: /var/cache/nginx
            name: nginx-home
        dnsPolicy: ClusterFirst
        initContainers:
        - args:
          - --watch-interval=0
          - --listen-address=:8080
          - --config-file=/etc/prometheus/config/prometheus.yaml.gz
          - --config-envsubst-file=/etc/prometheus/config_out/prometheus.env.yaml
          - --watched-dir=/etc/prometheus/rules/prometheus-rancher-monitoring-prometheus-rulefiles-0
          command:
          - /bin/prometheus-config-reloader
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: SHARD
            value: "0"
          image: rancher/mirrored-prometheus-operator-prometheus-config-reloader:v0.50.0
          imagePullPolicy: IfNotPresent
          name: init-config-reloader
          ports:
          - containerPort: 8080
            name: reloader-web
            protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 100m
              memory: 50Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/prometheus/config
            name: config
          - mountPath: /etc/prometheus/config_out
            name: config-out
          - mountPath: /etc/prometheus/rules/prometheus-rancher-monitoring-prometheus-rulefiles-0
            name: prometheus-rancher-monitoring-prometheus-rulefiles-0
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 2000
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
        serviceAccount: rancher-monitoring-prometheus
        serviceAccountName: rancher-monitoring-prometheus
        terminationGracePeriodSeconds: 600
        tolerations:
        - effect: NoSchedule
          key: cattle.io/os
          operator: Equal
          value: linux
        volumes:
        - name: config
          secret:
            defaultMode: 420
            secretName: prometheus-rancher-monitoring-prometheus
        - name: tls-assets
          secret:
            defaultMode: 420
            secretName: prometheus-rancher-monitoring-prometheus-tls-assets
        - emptyDir: {}
          name: config-out
        - configMap:
            defaultMode: 420
            name: prometheus-rancher-monitoring-prometheus-rulefiles-0
          name: prometheus-rancher-monitoring-prometheus-rulefiles-0
        - name: web-config
          secret:
            defaultMode: 420
            secretName: prometheus-rancher-monitoring-prometheus-web-config
        - emptyDir: {}
          name: nginx-home
        - configMap:
            defaultMode: 438
            name: prometheus-nginx-proxy-config
          name: prometheus-nginx
    updateStrategy:
      type: RollingUpdate
    volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        creationTimestamp: null
        name: prometheus-rancher-monitoring-prometheus-db
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 50Gi
        storageClassName: longhorn
        volumeMode: Filesystem
      status:
        phase: Pending
  status:
    collisionCount: 0
    currentReplicas: 1
    currentRevision: prometheus-rancher-monitoring-prometheus-5d65c8544
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: prometheus-rancher-monitoring-prometheus-5d65c8544
    updatedReplicas: 1
kind: List
metadata:
  resourceVersion: "14659119"
